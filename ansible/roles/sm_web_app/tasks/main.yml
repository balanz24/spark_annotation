---

- name: Pull client config template from the remote host
  fetch: src={{ sm_webapp_home }}/src/clientConfig.json.template dest=/tmp/clientConfig.json.template
         flat=yes fail_on_missing=yes

- name: Save client config as ./src/clientConfig.json
  template: src=/tmp/clientConfig.json.template dest={{ sm_webapp_home }}/src/clientConfig.json
            owner=ubuntu group=ubuntu mode=0600

- name: Make sure logs directory exists
  file: path={{ sm_webapp_home }}/logs state=directory mode=0755

- name: Make sure upload directory exists
  become: yes
  file: path={{ sm_webapp_upload_destination }} state=directory mode=0755 owner=ubuntu group=ubuntu
  when: sm_webapp_upload_destination != 's3'

- name: Install sm-webapp's version of Node.js (if needed)
  # This only installs a new version if there isn't a matching existing version
  shell: "{{ sm_activate_nvm }} || nvm install"
  args:
    chdir: "{{ sm_webapp_home }}"
    executable: /bin/bash

- name: Install sm-web-app dependencies
  shell: "{{ sm_activate_nvm }} && yarn install"
  args:
    chdir: "{{ sm_webapp_home }}"
    executable: /bin/bash

- name: Run build app
  shell: "{{ sm_activate_nvm }} && nice yarn run build"
  args:
    chdir: "{{ sm_webapp_home }}"
    executable: /bin/bash

- name: Copy build output
  become: true
  shell: >
    [ -d "{{ sm_webapp_www }}/old_ver" ] && rm -rf "{{ sm_webapp_www }}/old_ver";
    [ -d "{{ sm_webapp_home }}/dist/old_ver" ] && rm -rf "{{ sm_webapp_home }}/dist/old_ver";
    [ -d "{{ sm_webapp_www }}" ] && mv "{{ sm_webapp_www }}" "{{ sm_webapp_home }}/dist/old_ver";
    cp --preserve --recursive "{{ sm_webapp_home }}/dist" "{{ sm_webapp_www }}";
  args:
    chdir: "{{ sm_webapp_home }}"
    executable: /bin/bash
